length(er_P_valid_pres_n) + length(er_N_valid_pres_n)
# Predicted good prognosis vs Poor prognosis groups
er_P_train_prechem_p = intersect(er_P_train, which(chemo_p_indi==1))
er_P_train_prechem_n = intersect(er_P_train, which(chemo_n_indi==1))
er_N_train_prechem_p = intersect(er_N_train, which(chemo_p_indi==1))
er_N_train_prechem_n = intersect(er_N_train, which(chemo_n_indi==1))
er_P_valid_prechem_p = intersect(er_P_valid, which(chemo_p_indi==1))
er_P_valid_prechem_n = intersect(er_P_valid, which(chemo_n_indi==1))
er_N_valid_prechem_p = intersect(er_N_valid, which(chemo_p_indi==1))
er_N_valid_prechem_n = intersect(er_N_valid, which(chemo_n_indi==1))
## Analysis in the paper Ex 4.3;
# Note: we used 0.02 as the critical p-value cutoff. One can
# use different values to control the significance level.
#
# DLDA30
# ER- training, res+
# [length(er_N_train_pres_p) sum(bstcens[er_N_train_pres_p])]
#   112    36
bsttime[er_N_train_pres_p
]
bstcens[er_N_train_pres_p]
train.er_n_pres_p = RPEXEv1_2(EventTime = 'EventTime',bsttime[er_N_train_pres_p],
Censor = 'Censor',bstcens[er_N_train_pres_p],Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.02)
train.er_n_pres_p = RPEXEv1_2(EventTime = 'EventTime',bsttime[er_N_train_pres_p],
Censor = 'Censor',bstcens[er_N_train_pres_p],Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.02)
train.er_n_pres_p = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.02)
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
source('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example3/example3_modified2016.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
time
censor
tmpdata
cbind(sew,censor,time)
tmp2
pexeoutA = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.03)
while(tmpdata[j,3] != min(tmpdata[,3])){
j = j+1
}
x=0
while(x<3){
x=x+1
}
cat(x)
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmpdata[,3]
tmpdata
sew
tmpdata
tmpdata=data.frame(sew,censor,time)
tmpdata
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmpdata
dim(tmp2)[1]
tmp2
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
i
tmp2[2,3]
tmp2
x<-matrix(0,c(2,3))
x
x<-matrix(0,nrow = 3, ncol =2)
x
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmpdata
tmp2
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmpdata[,3]
min(tmpdata[,3])
tmp2
j
j
tmpdata
tmp2
tmpdata
j
tmpdata
j
tmpdata
tmp2
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
i
cat(3)
print(3)
i
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmp2
tmp2
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmp2
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
i
tmp2[1,2]
tmp2[1,4]
x<-c(1,2,3)
y<-rep(0,3)
cbind(x,y)
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmp2
tmp2
tmp2
k
tmp3
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
tmp3
tmp3
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]>0
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example1/checking_EXP.R')
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
i
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
i
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
i
t(tmp3[i:dim(tmp3)[1],2])%*%tmp3[i:dim(tmp3)[1],2]==0 && tmp3[i-1,2]!=0
i
tmp3
k = length(tmp3[i:dim(tmp3)[1],2])
k
tmp3
length(tmp3[,9])
tmp3
k
tmp3
time_die
ttot
ttot
ttot
pexeoutA = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.03)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data1<-read.csv("data1.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data1[,1]
censor = data1[,2]
sum(censor)
# Fit the rpexe with monotonic order restriction;
pexeoutA = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.03)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data1<-read.csv("data1.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data1[,1]
censor = data1[,2]
sum(censor)
# Fit the rpexe with monotonic order restriction;
pexeoutA = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 3,Criticalp = 'Criticalp',criticalps=0.03)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data[,1]
censor = data[,2]
group = data[,3]
ID_nan = which(is.na(times))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
ID_nan
times = times[-ID_nan]
times
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
km(times[armsA_ID], censor[armsA_ID], 0)
km2(times[armsA_ID], censor[armsA_ID], 1)
km(times[armsB_ID], censor[armsB_ID], 0)
km2(times[armsB_ID], censor[armsB_ID], 0)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
# Plot the data
# figure(1)
km(times[armsA_ID], censor[armsA_ID], 0)
# figure(2)
km2(times[armsA_ID], censor[armsA_ID], 1)
# figure(3)
km(times[armsB_ID], censor[armsB_ID], 0)
# figure(4)
km2(times[armsB_ID], censor[armsB_ID], 0)
# Plot the KME in the paper
# figure(5)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
km(times[armsA_ID], censor[armsA_ID], 0)
km2(times[armsA_ID], censor[armsA_ID], 1)
debugSource('~/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE Version 2.0_yz/Examples/example2/RPEXE_fitting.R')
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
# Plot the data
# figure(1)
km(times[armsA_ID], censor[armsA_ID], 0)
# figure(2)
km2(times[armsA_ID], censor[armsA_ID], 1)
# figure(3)
km(times[armsB_ID], censor[armsB_ID], 0)
# figure(4)
km2(times[armsB_ID], censor[armsB_ID], 0)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
# Plot the data
# figure(1)
km(times[armsA_ID], censor[armsA_ID], 0)
# figure(2)
km2(times[armsA_ID], censor[armsA_ID], 1)
# figure(3)
km(times[armsB_ID], censor[armsB_ID], 0)
# figure(4)
km2(times[armsB_ID], censor[armsB_ID], 0)
# Plot the KME in the paper
# figure(5)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
km(times[armsA_ID], censor[armsA_ID], 0)
km2_add(times[armsB_ID], censor[armsB_ID], 0)
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
result = km(times[armsA_ID], censor[armsA_ID], 0)
result[1]
# Set your current work directory that contains this code
setwd("/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/Examples/")
# source("../R version/")
# include R functions
pathnames <- list.files(pattern="[.]R$", path="/Users/zy/Dropbox/SurvivalAnalysis/Survival/RPEXE_YZ_version/RPEXE\ Version\ 2.0_yz/R\ version", full.names=TRUE)
sapply(pathnames, FUN=source)
# load data
data2<-read.csv("data2.csv", sep=";",header=FALSE,na.string=c("","null","NaN","X"))
times = data2[,1]
censor = data2[,2]
group = data2[,3]
ID_nan = which(is.na(times))
times = times[-ID_nan]
censor = censor[-ID_nan]
group = group[-ID_nan]
armsA_ID = which(group == 1)
armsB_ID = which(group == 2)
result = km(times[armsA_ID], censor[armsA_ID], 0)
result
result = km2(times[armsA_ID], censor[armsA_ID], 0)
result
result = km2(times[armsA_ID], censor[armsA_ID], 0)
result[1]
x1 = cbind(times[armsA_ID], censor[armsA_ID])
x2 = cbind(times[armsB_ID], censor[armsB_ID])
logrank(x1,x2)
(0.4828-0.4738)/sqrt(0.4828*(1-0.4828)/53+0.4738*(1-0.4738)/47)
(0.3276-0.3796)/sqrt(0.3276*(1-0.3276)/53+0.3796*(1-0.3796)/47)
pexeoutA     =  RPEXEv1_2(EventTime = 'EventTime',times[armsA_ID],
Censor = 'Censor',censor[armsA_ID],Trend = 'Trend',
trend = 1,Criticalp = 'Criticalp',criticalps=0.05)
pexeout = RPEXEv1_2(EventTime = 'EventTime',times,
Censor = 'Censor',censor,Trend = 'Trend',
trend = 1,Criticalp = 'Criticalp',criticalps=0.05)
returnvA=totaltest(times[armsA_ID],censoring[armsA_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvA)[2]/3
time_dieA=returnvA[,1:m]
ttotA=returnvA[,(m+1):(2*m)]
deathsA=returnvA[,(2*m+1):3*m]
returnvB=totaltest(times[armsB_ID],censoring[armsB_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvB)[2]/3
time_dieB=returnvB[,1:m]
ttotB=returnvB[,(m+1):(2*m)]
deathsB=returnvB[,(2*m+1):3*m]
ttotA1 = 0;
ttotA2 = 0;
ttotA3 = 0;
dA1 = 0;
dA2 = 0;
dA3 = 0;
for (i in 1:length(time_dieA))
{
if ( time_dieA[i]<=2.777)
{
ttotA1 = ttotA1+ttotA[i]
dA1    = dA1+deathsA[i]
}else if (time_dieA[i]<=8.959)
{
ttotA2 = ttotA2+ttotA[i]
dA2    = dA2+deathsA[i]
} else
{
ttotA3 = ttotA3+ttotA[i]
dA3    = dA3+deathsA[i]
}
}
returnvA=totaltest(times[armsA_ID],censor[armsA_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvA)[2]/3
time_dieA=returnvA[,1:m]
ttotA=returnvA[,(m+1):(2*m)]
deathsA=returnvA[,(2*m+1):3*m]
returnvB=totaltest(times[armsB_ID],censor[armsB_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvB)[2]/3
time_dieB=returnvB[,1:m]
ttotB=returnvB[,(m+1):(2*m)]
deathsB=returnvB[,(2*m+1):3*m]
ttotA1 = 0
ttotA2 = 0
ttotA3 = 0
dA1 = 0
dA2 = 0
dA3 = 0
for (i in 1:length(time_dieA))
{
if ( time_dieA[i]<=2.777)
{
ttotA1 = ttotA1+ttotA[i]
dA1    = dA1+deathsA[i]
}else if (time_dieA[i]<=8.959)
{
ttotA2 = ttotA2+ttotA[i]
dA2    = dA2+deathsA[i]
} else
{
ttotA3 = ttotA3+ttotA[i]
dA3    = dA3+deathsA[i]
}
}
[a21, p1]=exact_pvalue(ttotA1,ttotB1,dA1,dB1,0)
result = exact_pvalue(ttotA1,ttotB1,dA1,dB1,0)
returnvA=totaltest(times[armsA_ID],censor[armsA_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvA)[2]/3
time_dieA=returnvA[,1:m]
ttotA=returnvA[,(m+1):(2*m)]
deathsA=returnvA[,(2*m+1):3*m]
returnvB=totaltest(times[armsB_ID],censor[armsB_ID]) #returnv=list(time_die,ttot,deaths),the variables owns the same length
m=dim(returnvB)[2]/3
time_dieB=returnvB[,1:m]
ttotB=returnvB[,(m+1):(2*m)]
deathsB=returnvB[,(2*m+1):3*m]
ttotA1 = 0
ttotA2 = 0
ttotA3 = 0
dA1 = 0
dA2 = 0
dA3 = 0
for (i in 1:length(time_dieA))
{
if ( time_dieA[i]<=2.777)
{
ttotA1 = ttotA1+ttotA[i]
dA1    = dA1+deathsA[i]
}else if (time_dieA[i]<=8.959)
{
ttotA2 = ttotA2+ttotA[i]
dA2    = dA2+deathsA[i]
} else
{
ttotA3 = ttotA3+ttotA[i]
dA3    = dA3+deathsA[i]
}
}
ttotB1 = 0
ttotB2 = 0
ttotB3 = 0
dB1 = 0
dB2 = 0
dB3 = 0
for (i in 1:length(time_dieB))
{
if ( time_dieB[i]<=2.777)
{
ttotB1 = ttotB1+ttotB[i]
dB1    = dB1+deathsB[i]
}else if (time_dieB[i]<=8.959)
{
ttotB2 = ttotB2+ttotB[i]
dB2    = dB2+deathsB[i]
} else
{
ttotB3 = ttotB3+ttotB[i]
dB3    = dB3+deathsB[i]
}
}
result = exact_pvalue(ttotA1,ttotB1,dA1,dB1,0)
result[1]
library(RPEXE.RPEXT)
